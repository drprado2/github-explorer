{"version":3,"sources":["pages/Dashboard/styles.ts","services/api.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["Title","styled","h1","Form","form","props","hasError","css","shade","Repositories","div","Error","span","api","axios","create","baseURL","Dashboard","useState","storageRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","repoInput","setRepoInput","inputError","setInputError","event","a","preventDefault","get","response","data","console","error","useEffect","setItem","stringify","src","alt","onSubmit","type","placeholder","value","onChange","e","target","map","r","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","params","useRouteMatch","repository","setRepository","issues","setIssues","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","GlobalStyle","createGlobalStyle","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cf12d5f.chunk.js","sourcesContent":["import styled, {css} from 'styled-components';\r\nimport {shade} from 'polished';\r\n\r\ninterface FormProps {\r\n    hasError: boolean;\r\n}\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 48px;\r\n    color: #3A3A3A;\r\n    margin-top: 80px;\r\n    max-width: 450px;\r\n    line-height: 56px;\r\n`;\r\n\r\nexport const Form = styled.form<FormProps>`\r\n    \r\nmargin-top: 40px;\r\nmax-width: 700px;\r\ndisplay: flex;\r\n\r\ninput {\r\nflex: 1;\r\nheight: 70px;\r\npadding: 0 24px;\r\nborder-radius: 5px 0 0 5px;\r\n    color: #3A3A3A;\r\n    border: 2px solid #fff;\r\n    border-right: 0;\r\n    \r\n  ${(props) => props.hasError && css`\r\nborder-color: #c53030;\r\n`}\r\n\r\n&::placeholder {\r\ncolor: #a8a8b3;\r\n}\r\n}\r\n\r\nbutton {\r\nwidth: 210px;\r\nheight: 70px;\r\nbackground: #04d361;\r\nborder-radius: 0 5px 5px 0;\r\nborder: 0;\r\ncolor: #fff;\r\nfont-weight: bold;\r\ntransition: background-color 0.2s;\r\n\r\n&:hover {\r\nbackground: ${shade(0.2, '#04d361')};\r\n}\r\n}\r\n`;\r\n\r\nexport const Repositories = styled.div`\r\nmargin-top: 80px;\r\nmax-width: 700px;\r\n\r\na {\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.2s;\r\n    \r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n    \r\n    & + a {\r\n      margin-top: 16px;\r\n    }\r\n    \r\n\r\n    img {\r\n        width: 64px;\r\n        height: 64px;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    div {\r\n        margin: 0 16px;\r\n        flex: 1;\r\n\r\n        strong {\r\n            font-size: 20px;\r\n            color: #3D3D4D;\r\n        }\r\n        \r\n        p {\r\n            font-size: 18px;\r\n            color: #A8A8B3;\r\n            margin-top: 4px;\r\n        }\r\n    }\r\n    \r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n}\r\n`;\r\n\r\nexport const Error = styled.span`\r\n  display: block;\r\n  color: #c53030;\r\n  margin-top: 8px;\r\n`;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n   baseURL: 'https://api.github.com'\r\n});\r\n\r\nexport default api;","import React, {FormEvent, useEffect, useState} from \"react\";\r\nimport {Form, Repositories, Title, Error} from \"./styles\";\r\nimport {FiChevronRight} from 'react-icons/fi';\r\nimport api from \"../../services/api\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ninterface Repository {\r\n    full_name: string;\r\n    description: string;\r\n    owner: {\r\n        login: string;\r\n        avatar_url: string;\r\n    }\r\n}\r\n\r\nconst repositoriesLocalstorageKey = '@GithubExplorer:repositories';\r\n\r\nconst Dashboard: React.FC = () => {\r\n    const [repositories, setRepositories] = useState<Repository[]>(() => {\r\n        const storageRepositories = localStorage.getItem(repositoriesLocalstorageKey)\r\n        if (storageRepositories)\r\n            return JSON.parse(storageRepositories)\r\n        return [];\r\n    });\r\n    const [repoInput, setRepoInput] = useState('');\r\n    const [inputError, setInputError] = useState('');\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories))\r\n    }, [repositories])\r\n\r\n    async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\r\n        event.preventDefault();\r\n\r\n        if (!repoInput) {\r\n            setInputError('Digite o autor/nome do repositório');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await api.get('/repos/' + repoInput);\r\n            if (response.data)\r\n                setRepositories([...repositories, response.data]);\r\n            setInputError('');\r\n            setRepoInput('');\r\n        } catch (err) {\r\n            console.error(err);\r\n            setInputError('Repositório não encontrado!');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <img src=\"https://xesque.rocketseat.dev/platform/1587379765556-attachment.svg\" alt=\"Logo Github\"/>\r\n            <Title>Explore repositórios no Github.</Title>\r\n            <Form hasError={!!inputError} onSubmit={handleAddRepository}>\r\n                <input type=\"text\" placeholder=\"Digite o nome do repositório\" value={repoInput}\r\n                       onChange={e => setRepoInput(e.target.value)}/>\r\n                <button type=\"submit\">Pesquisar</button>\r\n            </Form>\r\n            {\r\n                inputError && <Error>{inputError}</Error>\r\n            }\r\n            <Repositories>\r\n                {repositories.map(r => (\r\n                    <Link key={r.full_name} to={`/repositories/${r.full_name}`}>\r\n                        <img src={r.owner.avatar_url} alt={r.owner.login}/>\r\n                        <div>\r\n                            <strong>{r.full_name}</strong>\r\n                            <p>{r.description}</p>\r\n                        </div>\r\n                        <FiChevronRight size={20}/>\r\n                    </Link>\r\n                ))}\r\n            </Repositories>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import styled from 'styled-components';\r\n\r\nexport const Header = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  a {\r\n    display: flex;\r\n    align-items: center;\r\n    text-decoration: none;\r\n    color: #a8a8b3;\r\n    transition: color 0.2s;\r\n    \r\n    &:hover {\r\n      color: #666;\r\n    }\r\n      \r\n    svg {\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const RepositoryInfo = styled.section`\r\n  margin-top: 80px;\r\n  \r\n  header {\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n    img {\r\n      width: 120px;\r\n      height: 120px;\r\n      border-radius: 50%;\r\n    }\r\n    \r\n    div {\r\n      margin-left: 24px;\r\n    \r\n      strong {\r\n        font-size: 36px;\r\n        color: #3d3d4d;\r\n      }\r\n      \r\n      p {\r\n        font-size: 18px;\r\n        color: #737380;\r\n      }\r\n    }\r\n  }\r\n  \r\n  ul {\r\n    display: flex;\r\n    list-style: none;\r\n    margin-top: 40px;\r\n    \r\n    li {\r\n      \r\n      & + li {\r\n        margin-left: 80px;\r\n      }\r\n    \r\n      strong {\r\n        display: block;\r\n        font-size: 36px;\r\n        color: #3d3d4d;\r\n      }\r\n      \r\n      span {\r\n        display: block;\r\n        margin-top: 4px;\r\n        color: #6c6c8a;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Issues = styled.div`\r\nmargin-top: 80px;\r\n\r\na {\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.2s;\r\n    \r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n    \r\n    & + a {\r\n      margin-top: 16px;\r\n    }\r\n\r\n    div {\r\n        margin: 0 16px;\r\n        flex: 1;\r\n\r\n        strong {\r\n            font-size: 20px;\r\n            color: #3D3D4D;\r\n        }\r\n        \r\n        p {\r\n            font-size: 18px;\r\n            color: #A8A8B3;\r\n            margin-top: 4px;\r\n        }\r\n    }\r\n    \r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n}\r\n`;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Link, useRouteMatch} from \"react-router-dom\";\r\nimport {FiChevronLeft} from \"react-icons/all\";\r\nimport {Header, Issues, RepositoryInfo} from \"./styles\";\r\nimport {FiChevronRight} from \"react-icons/fi\";\r\nimport api from \"../../services/api\";\r\n\r\ninterface RepositoryParams {\r\n    repository: string;\r\n}\r\n\r\ninterface Repository {\r\n    full_name: string;\r\n    description: string;\r\n    stargazers_count: number;\r\n    forks_count: number;\r\n    open_issues_count: number;\r\n    owner: {\r\n        login: string;\r\n        avatar_url: string;\r\n    };\r\n}\r\n\r\ninterface Issue {\r\n    id: number;\r\n    title: string;\r\n    html_url: string;\r\n    user: {\r\n        login: string;\r\n    };\r\n}\r\n\r\nconst Repository: React.FC = () => {\r\n    const {params} = useRouteMatch<RepositoryParams>();\r\n\r\n    const [repository, setRepository] = useState<Repository | null>(null);\r\n    const [issues, setIssues] = useState<Issue[]>([]);\r\n\r\n    useEffect(() => {\r\n        api.get(`repos/${params.repository}`).then((response) => {\r\n            setRepository(response.data);\r\n        });\r\n\r\n        api.get(`repos/${params.repository}/issues`).then((response) => {\r\n            setIssues(response.data);\r\n        });\r\n    }, [params.repository]);\r\n\r\n    return (\r\n        <>\r\n            <Header>\r\n                <img src=\"https://xesque.rocketseat.dev/platform/1587379765556-attachment.svg\" alt=\"Logo Github\"/>\r\n                <Link to=\"/\">\r\n                    <FiChevronLeft size={16} />\r\n                    Voltar\r\n                </Link>\r\n            </Header>\r\n\r\n            {repository && (\r\n                <RepositoryInfo>\r\n                    <header>\r\n                        <img\r\n                            src={repository.owner.avatar_url}\r\n                            alt={repository.owner.login}\r\n                        />\r\n                        <div>\r\n                            <strong>{repository.full_name}</strong>\r\n                            <p>{repository.description}</p>\r\n                        </div>\r\n                    </header>\r\n                    <ul>\r\n                        <li>\r\n                            <strong>{repository.stargazers_count}</strong>\r\n                            <span>Stars</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>{repository.forks_count}</strong>\r\n                            <span>Forks</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>{repository.open_issues_count}</strong>\r\n                            <span>Issues abertas</span>\r\n                        </li>\r\n                    </ul>\r\n                </RepositoryInfo>\r\n            )}\r\n\r\n            <Issues>\r\n                {issues.map((issue) => (\r\n                    <a key={issue.id} href={issue.html_url}>\r\n                        <div>\r\n                            <strong>{issue.title}</strong>\r\n                            <p>{issue.user.login}</p>\r\n                        </div>\r\n\r\n                        <FiChevronRight size={20} />\r\n                    </a>\r\n                ))}\r\n            </Issues>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Repository;","import React from 'react'\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport Dashboard from \"../pages/Dashboard\";\r\nimport Repository from \"../pages/Repository\";\r\n\r\nconst Routes: React.FC = () => (\r\n    <Switch>\r\n        <Route path=\"/\" exact component={Dashboard} />\r\n        <Route path=\"/repositories/:repository+\" component={Repository} />\r\n    </Switch>\r\n)\r\n\r\nexport default Routes;","import {createGlobalStyle} from \"styled-components\";\r\nimport githubBackground from '../assets/github-background.svg';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: 0;\r\n  box-sizing: border-box;\r\n  }\r\n  \r\n  body {\r\n  background: #E5E5E5 url(\"https://xesque.rocketseat.dev/platform/1587379725719-attachment.svg\") no-repeat 70% top;\r\n  -webkit-font-smoothing: antialiased;\r\n  }\r\n  \r\n  body, input, button {\r\n  font: 16px Roboto, sans-serif;\r\n  }\r\n  \r\n  #root {\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n  padding: 40px 20px;\r\n  }\r\n  \r\n  button {\r\n  cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;","import React from 'react';\nimport Routes from \"./routes\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport GlobalStyle from \"./styles/global\";\n\nconst App: React.FC = () => (\n    <>\n        <BrowserRouter basename={!process.env.NODE_ENV || process.env.NODE_ENV === 'development' ? '' : 'github-explorer'}>\n            <Routes/>\n        </BrowserRouter>\n        <GlobalStyle/>\n    </>\n)\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}